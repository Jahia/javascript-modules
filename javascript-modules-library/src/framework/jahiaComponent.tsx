import type { Bundle } from "org.osgi.framework";
import type { JSX } from "react";
import server from "virtual:jahia-server";
import { type ServerContext, useServerContext } from "../hooks/useServerContext.js";
import { getNodeProps } from "../utils/jcr/getNodeProps.js";

declare const bundle: Bundle;

export interface JahiaComponent {
  /** The ID of the component (autogenerated but can be overridden) */
  id?: string;
  /**
   * The name of the component.
   *
   * @default "default"
   */
  name?: string;
  /** The display name of the component (in jahia's UI), optional. */
  displayName?: string;
  /** The type of the component. */
  componentType: "template" | "view";
  /** The content node type the component applies to. */
  nodeType: string;
  /**
   * The priority of the components in case multiple templates/views are applicable to a given
   * resource. The component with the highest priority has precedence over the other components.
   *
   * @default 0
   */
  priority?: number;
  /** Properties to add on the component, optional. */
  properties?: Record<string, string>;
}

/**
 * Defines and registers a Jahia component into the global registry as a view.
 *
 * @param id The ID of the component (autogenerated but can be overridden)
 * @param definitions The definitions of the component
 * @param Component The component to register
 */
export const jahiaComponent = <T extends (props: never, context: ServerContext) => JSX.Element>(
  { id, ...definitions }: JahiaComponent,
  Component: T,
): T => {
  const options = {
    name: "default",
    templateType: "html",
    priority: 0,
    component: wrap(Component),
    ...definitions,
  };

  // If id is not provided, generate it using bundleSymbolicName, componentType, nodeType, and name
  // optionally, include the priority if different from the default value (to remain backward compatible)
  id ??= `${bundle.getSymbolicName()}_${options.componentType}_${options.nodeType}_${options.name}${options.priority ? "_" + options.priority : ""}`;

  // Register view
  const reactView = server.registry.get("view", "react");
  server.registry.add("view", id, reactView, options);

  console.debug(`Registered Jahia component: ${id}`);
  return Component;
};

/** Wraps `Component` to retrieve props from the JCR layer and pass them as usual component props. */
const wrap = (Component: (props: never, context: ServerContext) => JSX.Element) => () => {
  // Retrieve the current context
  const context = useServerContext();

  return Component(getNodeProps(context.currentNode), context);
};
